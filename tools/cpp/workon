#!/bin/bash
set -euo pipefail

AOC_ROOT="$(git rev-parse --show-toplevel)"
# shellcheck source=../lib.sh
source "$AOC_ROOT/tools/lib.sh"
# cd to the base directory for this year
cd -- "$AOC_ROOT/$AOC_YEAR"

read -r day year < <(parse_day_args "$@")
if ! [[ -e input/day$day/input.txt ]]; then
  bash "$TOOLS_DIR/get_input.sh" "$day" "$year"
fi

declare -a to_edit
if ! [[ -e input/day$day/example1.txt ]]; then
  to_edit+=("input/day$day/example1.txt")
fi
source_file="src/day$day.cpp"
header_file="src/day$day.hpp"
if ! [[ -e $source_file ]] && ! [[ -e $header_file ]]; then
  guard_nonce=$(python -c 'import random, string; print("".join(random.sample(string.ascii_letters+string.digits, 8)).upper())')
  replacements='s/{{DAY}}/'"$day"'/g;
    s/{{DATE}}/'"$(TZ='America/New_York' date +%F)"'/g;
    s/{{GUARD_NONCE}}/'"$guard_nonce"'/g;'
  sed "$replacements" templates/day.cpp > "$source_file"
  sed "$replacements" templates/day.hpp > "$header_file"
fi
to_edit+=("$source_file" "$header_file")

# update the entire compilation database if needed
make_quiet compile_commands.json -j"$(nproc)" || true
# build this day's binaries so the compilation database gets updated
make_targets=()
shopt -s lastpipe
make -q "build/release/day$day" 2>/dev/null || make_targets+=("build/release/day$day")
make -q "build/debug/day$day" 2>/dev/null || make_targets+=("build/debug/day$day")
if [[ ${#make_targets[@]} -gt 0 ]]; then
  make -j"${#make_targets[@]}" "${make_targets[@]}" || true
fi

if [[ -v DISPLAY ]] && [[ $DISPLAY == :* ]] && [[ -z ${SSH_CONNECTION+x} ]]; then
  # in a local X session, not over ssh
  NVIM_GUI=1 nvim-qt -- -O "${to_edit[@]}"
else
  nvim -O "${to_edit[@]}"
fi
