#!/bin/bash
set -euo pipefail

usage() {
  echo "Usage: aoc [day] [-t] [-q] [-d|-f] [--gdb] [-e [example number] [-w]|-i <input file name>]"
}

AOC_ROOT="$(git rev-parse --show-toplevel)"
# shellcheck source=../lib.sh
source "$AOC_ROOT/tools/lib.sh"
# cd to the base directory for this year
cd -- "$AOC_ROOT/$AOC_YEAR"

input_name=input.txt
day=$(TZ='America/New_York' date +%-d)
bin_dir=build/release
memory_limit=4G
prefix_args=()
make_args=()
write_answer=n

first_iter=y
while [[ $# -gt 0 ]]; do
  case $1 in
    -d|--debug)
      bin_dir=build/debug
      shift
      ;;
    -f|--fast)
      bin_dir=build/fast
      shift
      ;;
    -t|--time)
      prefix_args=(/usr/bin/time)
      shift
      ;;
    -q|--quiet|--silent)
      make_args+=(--silent)
      shift
      ;;
    -m|--memory-limit)
      memory_limit=$2
      shift
      shift
      ;;
    -e|--example)
      input_name=example1.txt
      if [[ $# -gt 1 ]]; then
        # example number given
        input_name=example$2.txt
        shift
      fi
      shift
      ;;
    -i|--input)
      input_name=$2
      shift
      shift
      ;;
    -w|--write-answer)
      write_answer=y
      shift
      ;;
    --gdb)
      bin_dir=build/debug
      prefix_args=(gdb --args)
      # run directly in the terminal
      memory_limit=none
      # detect_leaks=0:   Both gdb and LeakSanitizer use ptrace, but only one
      #                   process can attach at a time
      # abort_on_error=1: Break into gdb after a memory error is detected
      ASAN_OPTIONS=${ASAN_OPTIONS:+${ASAN_OPTIONS}:}detect_leaks=0:abort_on_error=1
      shift
      ;;
    -h|--help)
      usage
      exit 0
      ;;
    -*)
      echo "Error: unrecognized option '$1'"
      usage
      exit 1
      ;;
    *)
      if [[ $first_iter == y ]]; then
        day=$1
        shift
      else
        echo "Error: day can only be in the first argument"
        usage
        exit 1
      fi
      ;;
  esac
  first_iter=n
done

day=$(pad_day_number "$day")

input_path="input/day$day/$input_name"
if ! [[ -e "$input_path" ]]; then
  if [[ $input_name == input.txt ]]; then
    bash "$TOOLS_DIR/get_input.sh" "$day" "$AOC_YEAR"
  else
    >&2 echo "ERROR: could not find input file at $input_path"
    exit 2
  fi
fi

binary=$bin_dir/day$day

# rebuild if make says it's necessary
make_quiet "${make_args[@]}" "$binary"

if [[ $write_answer != y ]]; then
  echo "Day ${day#0}:"
fi
args=("${prefix_args[@]}" "$binary" "$input_path")

# run on the specified input
exit_code=0
if [[ $write_answer == y ]]; then
  output="answer_tests/${input_path#input/}"
  out_dir="$(dirname "$output")"
  mkdir -p "$out_dir"
  tmp_output="$(mktemp -p "$out_dir")"
  echo "Day ${day#0}:" > "$tmp_output"
  "${args[@]}" >> "$tmp_output" || exit_code=$?
  cat "$tmp_output"
  if [[ $exit_code -eq 0 ]]; then
    mv "$tmp_output" "$output" || true
  else
    rm -f "$tmp_output" || true
  fi
elif [[ $memory_limit == none ]]; then
  # have ASan print a backtrace when an assertion fails (which triggers an abort)
  ASAN_OPTIONS=${ASAN_OPTIONS:+${ASAN_OPTIONS}:}handle_abort=1 "${args[@]}" || exit_code=$?
else
  # limit memory usage using a systemd transient unit
  systemctl --quiet --user is-failed aoc.service && systemctl --user reset-failed aoc.service
  # explicitly stop the unit on SIGINT, as systemd-run doesn't seem to handle
  # it if any of the standard streams are redirected
  trap 'systemctl --quiet --user is-active aoc.service && systemctl --quiet --user stop aoc.service; exit 1' INT
  systemd-run --unit=aoc.service --quiet --user --pipe --wait --pty --same-dir -p MemoryMax="$memory_limit" -p MemorySwapMax=0 -E ASAN_OPTIONS=${ASAN_OPTIONS:+${ASAN_OPTIONS}:}handle_abort=1 "${args[@]}" || exit_code=$?
  trap - INT
  if systemctl --quiet --user is-failed aoc.service; then
    result=$(systemctl --user show aoc | sed -ne 's/^Result=//p')
    if [[ $result == oom-kill ]]; then
      >&2 echo "ERROR: ran out of memory (limited to $memory_limit)"
    fi
    systemctl --user reset-failed aoc.service
  fi
fi
exit $exit_code
