name: Build docker image

on:
  workflow_call:
    inputs:
      ubuntu-version:
        required: true
        type: string
      gcc-versions:
        description: 'Comma-separated list of GCC versions to install'
        required: true
        type: string
      llvm-versions:
        description: 'Comma-separated list of Clang and libc++ versions to install'
        required: true
        type: string
      rebuild:
        required: false
        type: boolean
        default: false
    outputs:
      image:
        value: ${{ jobs.check-registry.outputs.image }}
  workflow_dispatch:
    inputs:
      ubuntu-version:
        required: true
        type: string
        default: '24.04'
      gcc-versions:
        description: 'Comma-separated list of GCC versions to install'
        required: true
        type: string
        default: '13'
      llvm-versions:
        description: 'Comma-separated list of Clang and libc++ versions to install'
        required: true
        type: string
        default: '15,17'
      rebuild:
        required: true
        type: boolean
        default: true

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}/test-container

jobs:
  check-registry:
    runs-on: ubuntu-24.04
    name: Check ghcr.io for existing build

    steps:
      # Login against a Docker registry
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d  # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for existing build
        id: check-existing
        run: |
          gcc_versions=${{ inputs.gcc-versions }}
          llvm_versions=${{ inputs.llvm-versions }}
          IMAGE_VERSION="ubuntu-${{ inputs.ubuntu-version }}-gcc-${gcc_versions/,/-}-llvm-${llvm_versions/,/-}"
          echo "image-version=$IMAGE_VERSION" >> $GITHUB_OUTPUT
          if docker manifest inspect $REGISTRY/$IMAGE_NAME:$IMAGE_VERSION; then
            echo "in-registry=true" >> $GITHUB_OUTPUT
          else
            echo "in-registry=false" >> $GITHUB_OUTPUT
          fi

    outputs:
      in-registry: ${{ steps.check-existing.outputs.in-registry }}
      image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.check-existing.outputs.image-version }}

  build-image:
    runs-on: ubuntu-24.04
    permissions:
      packages: write
    needs: check-registry
    if: ${{ inputs.rebuild || !fromJson(needs.check-registry.outputs.in-registry) }}

    steps:
      - uses: actions/checkout@v4

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226  # v3.0.0

      # Login against a Docker registry
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d  # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09  # v5.0.0
        with:
          context: .
          file: .github/workflows/Dockerfile
          build-args: |
            UBUNTU_VERSION=${{ inputs.ubuntu-version }}
            GCC_VERSIONS=${{ inputs.gcc-versions }}
            LLVM_VERSIONS=${{ inputs.llvm-versions }}
          push: true
          tags: ${{ needs.check-registry.outputs.image }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
